//Author:朱思翰
//ID：2016229090


phase 1

由objdump -d bomb反汇编出来的结果为：
  400ee0:	48 83 ec 08          	sub    $0x8,%rsp
  400ee4:	be 00 24 40 00       	mov    $0x402400,%esi
  400ee9:	e8 4a 04 00 00       	callq  401338 <strings_not_equal>
  400eee:	85 c0                	test   %eax,%eax
  400ef0:	74 05                	je     400ef7 <phase_1+0x17>
  400ef2:	e8 43 05 00 00       	callq  40143a <explode_bomb>
  400ef7:	48 83 c4 08          	add    $0x8,%rsp
  400efb:	c3                   	retq   

其中每一条语句的含义如下：
  400ee0:	48 83 ec 08          	sub    $0x8,%rsp   rsp减8，调整栈的位置
  400ee4:	be 00 24 40 00       	mov    $0x402400,%esi  把地址0x402400里存的内容给esi寄存器
  400ee9:	e8 4a 04 00 00       	callq  401338 <strings_not_equal>  执行strings_not_equal函数
  400eee:	85 c0                	test   %eax,%eax            测试结果是否相等（test相等的结果为ZF=0）
  400ef0:	74 05                	je     400ef7 <phase_1+0x17>  相等跳转到400ef7
  400ef2:	e8 43 05 00 00       	callq  40143a <explode_bomb>  不相等执行explode_bomb程序，爆炸
  400ef7:	48 83 c4 08          	add    $0x8,%rsp   rsp加8，调整栈指针位置
  400efb:	c3                   	retq     退出

  主函数里也有：
  400e32:	e8 67 06 00 00       	callq  40149e <read_line>  读取输入的字符串
  400e37:	48 89 c7             	mov    %rax,%rdi           将rax里的内容给rdi寄存器
  400e3a:	e8 a1 00 00 00       	callq  400ee0 <phase_1>    跳转执行phase_1函数

  故phase_1函数主要的目的是将我们输入的字符串与0x402400地址中存储的字符串进行比较，相同即可通过。
  故此时在gdb 模式下使用 x/s 0x402400 ，即可读取出里面的内容为："Border relations with Canada have never been better."
  将这个字符串输入，即可通过phase_1.

××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××

phase 2

由objdump -d bomb反汇编出来的结果为：
  400efc:	55                   	push   %rbp        rbp进栈
  400efd:	53                   	push   %rbx        rbx进栈
  400efe:	48 83 ec 28          	sub    $0x28,%rsp      开辟空间
  400f02:	48 89 e6             	mov    %rsp,%rsi           把栈首地址给rsi寄存器（rsi通常用来传递函数的第二个参数）
  400f05:	e8 52 05 00 00       	callq  40145c <read_six_numbers>   开始执行函数read_six_number，可知是需要我们输入6个数字（大胆假设上面是开辟了具有6个元素的数组）
                                                                           //read_six_numbers是通过函数sscanf从我们的输入中获得6个数字的
  400f0a:	83 3c 24 01          	cmpl   $0x1,(%rsp)            将1与rsp寄存器存储的内容进行比较
  400f0e:	74 20                	je     400f30 <phase_2+0x34>  相等则跳转（可知其实这里六个数中的第一个数就是1）
  400f10:	e8 25 05 00 00       	callq  40143a <explode_bomb>  不相等则爆炸
  400f15:	eb 19                	jmp    400f30 <phase_2+0x34> 
  400f17:	8b 43 fc             	mov    -0x4(%rbx),%eax       由400f3a跳转到此，-0x4(%rbx)即a[0]的值给eax寄存器（等于1）
  400f1a:	01 c0                	add    %eax,%eax             eax与自身相加结果存入eax寄存器中（等于2）
  400f1c:	39 03                	cmp    %eax,(%rbx)            比较eax内容与rbx内容
  400f1e:	74 05                	je     400f25 <phase_2+0x29>   相等则跳转 （表明数组中a[1]=a[0]*2)
  400f20:	e8 15 05 00 00       	callq  40143a <explode_bomb>   不等则爆炸
  400f25:	48 83 c3 04          	add    $0x4,%rbx                 地址加4，即从数组中一个数跳到下一个数
  400f29:	48 39 eb             	cmp    %rbp,%rbx                 地址是否到最后一个a[6]
  400f2c:	75 e9                	jne    400f17 <phase_2+0x1b>     不相等则跳转400f17，继续循环
  400f2e:	eb 0c                	jmp    400f3c <phase_2+0x40>    循环体执行完以后跳转400f3c

  400f30:	48 8d 5c 24 04       	lea    0x4(%rsp),%rbx            把rsp+0x4的地址给rbx寄存器（数组中的a[1]）
  400f35:	48 8d 6c 24 18       	lea    0x18(%rsp),%rbp            把rsp+0x18的地址给rbp寄存器（数组中的a[6]的地址，即使没有a[6]?)
  400f3a:	eb db                	jmp    400f17 <phase_2+0x1b>      跳转到400f17
  400f3c:	48 83 c4 28          	add    $0x28,%rsp    跳出循环后跳转到此，rsp加28
  400f40:	5b                   	pop    %rbx          rbx出栈
  400f41:	5d                   	pop    %rbp          rbp出栈
  400f42:	c3                   	retq                 退出

  从上面可知，程序要求我们输入6个数字，且已知1是第一个数字，再根据循环体里的内容可知是自己加自己得到下一个数，以此类推是1,2,4,8,16,32这六个数
  将这6个数输入，phase_2通过.


×××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××

phase 3

由objdump -d bomb反汇编出来的结果为：

  400f43:	48 83 ec 18          	sub    $0x18,%rsp

  // lea取出地址，表示输入数据存储的位置
  400f47:	48 8d 4c 24 0c       	lea    0xc(%rsp),%rcx
  400f4c:	48 8d 54 24 08       	lea    0x8(%rsp),%rdx
  
  //把0x4025cf里的值给esi寄存器，把0给eax寄存器
  //从这里可知，利用gdb查看0x4025cf里的内容，是“%d %d”，即输入的格式
  400f51:	be cf 25 40 00       	mov    $0x4025cf,%esi
  400f56:	b8 00 00 00 00       	mov    $0x0,%eax
  400f5b:	e8 90 fc ff ff       	callq  400bf0 <__isoc99_sscanf@plt>

  //将eax里的值与1进行比较，大于1则跳转到400f6a，不大于则跳转到40143a，爆炸（输入数据个数必须大于1个，否则爆炸）
  400f60:	83 f8 01             	cmp    $0x1,%eax
  400f63:	7f 05                	jg     400f6a <phase_3+0x27>
  400f65:	e8 d0 04 00 00       	callq  40143a <explode_bomb>
  // 输入的第一个数与7进行比较，大于7则跳转到400fad（而400fad是爆炸函数，即输入的数不能超过7)，并且是无符号数）
  400f6a:	83 7c 24 08 07       	cmpl   $0x7,0x8(%rsp)
  400f6f:	77 3c                	ja     400fad <phase_3+0x6a>
  //输入的第一个数放入到eax寄存器中，跳转到402470+%rax*8的地址，可以使用p/x查看跳转目的地
  //跳转结果如下：(不大于7就是0到7）
      *0x402470:      $1 = 0x400f7c
      *(0x402470+8):  $2 = 0x400fb9
      *(0x402470+16): $3 = 0x400f83
      *(0x402470+24): $4 = 0x400f8a
      *(0x402470+32): $5 = 0x400f91
      *(0x402470+40): $6 = 0x400f98
      *(0x402470+48): $7 = 0x400f9f
      *(0x402470+56): $8 = 0x400fa6      
  // 可以看出这些对应的下面的地址，每一种情况都跳转到一个地址（switch语句）
  400f71:	8b 44 24 08          	mov    0x8(%rsp),%eax
  400f75:	ff 24 c5 70 24 40 00 	jmpq   *0x402470(,%rax,8)
 
  //下面的7种情况都是将一个数字存到eax中，然后跳转到400fbe中
  //转换为十进制 
  400f7c:	b8 cf 00 00 00       	mov    $0xcf,%eax              // 207
  400f81:	eb 3b                	jmp    400fbe <phase_3+0x7b>
  400f83:	b8 c3 02 00 00       	mov    $0x2c3,%eax             // 707
  400f88:	eb 34                	jmp    400fbe <phase_3+0x7b>
  400f8a:	b8 00 01 00 00       	mov    $0x100,%eax             // 256
  400f8f:	eb 2d                	jmp    400fbe <phase_3+0x7b>
  400f91:	b8 85 01 00 00       	mov    $0x185,%eax             // 389
  400f96:	eb 26                	jmp    400fbe <phase_3+0x7b>
  400f98:	b8 ce 00 00 00       	mov    $0xce,%eax              // 206
  400f9d:	eb 1f                	jmp    400fbe <phase_3+0x7b>
  400f9f:	b8 aa 02 00 00       	mov    $0x2aa,%eax             // 682
  400fa4:	eb 18                	jmp    400fbe <phase_3+0x7b>
  400fa6:	b8 47 01 00 00       	mov    $0x147,%eax             // 327
  400fab:	eb 11                	jmp    400fbe <phase_3+0x7b>

  400fad:	e8 88 04 00 00       	callq  40143a <explode_bomb>
  400fb2:	b8 00 00 00 00       	mov    $0x0,%eax
  400fb7:	eb 05                	jmp    400fbe <phase_3+0x7b>
  400fb9:	b8 37 01 00 00       	mov    $0x137,%eax             // 311

  //上述情况跳转到此，将输入的第二个数，与eax中的值进行比较，相等则跳转到400fc9，不相等跳转到40143a爆炸
  400fbe:	3b 44 24 0c          	cmp    0xc(%rsp),%eax
  400fc2:	74 05                	je     400fc9 <phase_3+0x86>
  400fc4:	e8 71 04 00 00       	callq  40143a <explode_bomb>
  //结束，rsp加18
  400fc9:	48 83 c4 18          	add    $0x18,%rsp
  400fcd:	c3                   	retq   

  从上面可知，程序要求输入两个数字，然后第一个数字是不能大于7的非负数，此时有0到7八种选择，然后程序设置了一个switch语句，根据输入的第一个数，会相应跳转到
  不同的情况，即第一个数决定了第二个数，经过上面的代码，我们得出了这几种组合： 0和207， 1和311， 2和707， 3和256， 4和389， 5和206， 6和682， 7和327
  输入上述任意一组数字都可通过phase_3.

×××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××

phase 4

由objdump -d bomb反汇编出来的结果为：

000000000040100c <phase_4>:
  40100c:	48 83 ec 18          	sub    $0x18,%rsp

  // lea取出地址，表示输入数据存储的位置
  401010:	48 8d 4c 24 0c       	lea    0xc(%rsp),%rcx
  401015:	48 8d 54 24 08       	lea    0x8(%rsp),%rdx

  //把0x4025cf里的值给esi寄存器，把0给eax寄存器
  //从这里可知，利用gdb查看0x4025cf里的内容，是“%d %d”，即输入的格式
  40101a:	be cf 25 40 00       	mov    $0x4025cf,%esi
  40101f:	b8 00 00 00 00       	mov    $0x0,%eax
  401024:	e8 c7 fb ff ff       	callq  400bf0 <__isoc99_sscanf@plt>

  //eax与2相比较，不相等则跳转401035爆炸（输入的数字个数必须是2个）
  401029:	83 f8 02             	cmp    $0x2,%eax
  40102c:	75 07                	jne    401035 <phase_4+0x29>

  //将第一个输入的数字与0xe（14）相比较，小于等于14则跳转40103a，否则就爆炸
  40102e:	83 7c 24 08 0e       	cmpl   $0xe,0x8(%rsp)
  401033:	76 05                	jbe    40103a <phase_4+0x2e>
  401035:	e8 00 04 00 00       	callq  40143a <explode_bomb>

  //把0xe给edx寄存器，把0给esi寄存器，把输入的第一个数给edi寄存器，跳转到func4
  40103a:	ba 0e 00 00 00       	mov    $0xe,%edx
  40103f:	be 00 00 00 00       	mov    $0x0,%esi
  401044:	8b 7c 24 08          	mov    0x8(%rsp),%edi

  //调用func4函数，测试eax寄存器中的数是否为0，不为0则跳转到401058，爆炸
  //通过下面func4函数可知，要使得eax寄存器值为0，此时需要跳转到400ff2再跳转到401007结束才行，其它情况会在func4中一直调用
  401048:	e8 81 ff ff ff       	callq  400fce <func4>
  40104d:	85 c0                	test   %eax,%eax
  40104f:	75 07                	jne    401058 <phase_4+0x4c>
  
  //比较第二个输入的数和0之间，相等则跳转到40105d结束，不相等则爆炸
  401051:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%rsp)
  401056:	74 05                	je     40105d <phase_4+0x51>
  401058:	e8 dd 03 00 00       	callq  40143a <explode_bomb>
  40105d:	48 83 c4 18          	add    $0x18,%rsp
  401061:	c3                   	retq   

0000000000400fce <func4>:
  400fce:	48 83 ec 08          	sub    $0x8,%rsp
  400fd2:	89 d0                	mov    %edx,%eax
  400fd4:	29 f0                	sub    %esi,%eax
  400fd6:	89 c1                	mov    %eax,%ecx
  400fd8:	c1 e9 1f             	shr    $0x1f,%ecx
  400fdb:	01 c8                	add    %ecx,%eax
  400fdd:	d1 f8                	sar    %eax   // 算术右移一位，除以2，即eax等于7
  400fdf:	8d 0c 30             	lea    (%rax,%rsi,1),%ecx
  // edi与ecx(7）作比较，ecx小于等于edi则跳转400ff2,否则减1后递归调用func4
  400fe2:	39 f9                	cmp    %edi,%ecx  
  400fe4:	7e 0c                	jle    400ff2 <func4+0x24>
  400fe6:	8d 51 ff             	lea    -0x1(%rcx),%edx
  400fe9:	e8 e0 ff ff ff       	callq  400fce <func4>
  400fee:	01 c0                	add    %eax,%eax
  400ff0:	eb 15                	jmp    401007 <func4+0x39>
  400ff2:	b8 00 00 00 00       	mov    $0x0,%eax
  // edi与ecx（7）作比较，ecx大于等于edi则跳转到401007结束，否则加1后递归调用func4
  400ff7:	39 f9                	cmp    %edi,%ecx
  400ff9:	7d 0c                	jge    401007 <func4+0x39>
  400ffb:	8d 71 01             	lea    0x1(%rcx),%esi
  400ffe:	e8 cb ff ff ff       	callq  400fce <func4>
  401003:	8d 44 00 01          	lea    0x1(%rax,%rax,1),%eax
  401007:	48 83 c4 08          	add    $0x8,%rsp
  40100b:	c3                   	retq   

  func4可以写成的C语言代码为：
  static int func4(int a, int b, int c)   // %edi %esi %edx
  {  
    int tmp = (((c - b) + ((c - b) >> 31)) >> 1) + b;  
  
    if (tmp <= a) {  
        if (tmp == a) {  
            return (0);  
        } else {  
            return func4(a, tmp + 1, c) * 2 + 1;  
        }  
    } else {  
        return func4(a, b, tmp - 1) * 2;  
    }  
  }  
  
  函数最终的输出有四个数字（遍历0到14，因为第一个数小于等于14），为0,1,3,7.故我们输入两个数，第一个数是0,1,3,7选择一个，第二个数是0
  输入过后成功，phase_4通过

×××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××

phase_5

0000000000401062 <phase_5>:
  401062:	53                   	push   %rbx  //寄存器入栈
  401063:	48 83 ec 20          	sub    $0x20,%rsp
  401067:	48 89 fb             	mov    %rdi,%rbx  // 使寄存器指向我们的输入
  40106a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax // 将fs选择值的偏移值0x28存入rax寄存器
  401071:	00 00 
  401073:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  401078:	31 c0                	xor    %eax,%eax
  
  //判断字符串长度，长度不等于6时爆炸，等于6时跳转4010d2
  40107a:	e8 9c 02 00 00       	callq  40131b <string_length>
  40107f:	83 f8 06             	cmp    $0x6,%eax
  401082:	74 4e                	je     4010d2 <phase_5+0x70>
  401084:	e8 b1 03 00 00       	callq  40143a <explode_bomb>

  401089:	eb 47                	jmp    4010d2 <phase_5+0x70>
  40108b:	0f b6 0c 03          	movzbl (%rbx,%rax,1),%ecx //将rbx地址加上rax地址得到的地址中存的值给ecx寄存器
  40108f:	88 0c 24             	mov    %cl,(%rsp)
  401092:	48 8b 14 24          	mov    (%rsp),%rdx
  401096:	83 e2 0f             	and    $0xf,%edx  // 只取字符的低4位（以我们输入的内容取低4位）

  401099:	0f b6 92 b0 24 40 00 	movzbl 0x4024b0(%rdx),%edx // 用rdx中的值作为索引来访问0x4024b0中的内容并存入到edx寄存器中
  4010a0:	88 54 04 10          	mov    %dl,0x10(%rsp,%rax,1) // 访问数组，首地址为rsp+0x10
  4010a4:	48 83 c0 01          	add    $0x1,%rax
  4010a8:	48 83 f8 06          	cmp    $0x6,%rax
  4010ac:	75 dd                	jne    40108b <phase_5+0x29> // 循环访问6次
  4010ae:	c6 44 24 16 00       	movb   $0x0,0x16(%rsp) //将rsp+0x16地址处对应的值设为0（数组的第7个元素，因为首地址为rsp+0x10）
  4010b3:	be 5e 24 40 00       	mov    $0x40245e,%esi  // 将0x40245e处的内容给esi
  4010b8:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi // 将刚刚的局部数组首地址给rdi
  4010bd:	e8 76 02 00 00       	callq  401338 <strings_not_equal> // 比较0x40245e处内容和局部数组的值
  4010c2:	85 c0                	test   %eax,%eax
  4010c4:	74 13                	je     4010d9 <phase_5+0x77>  // 相等则跳转4010d9
  4010c6:	e8 6f 03 00 00       	callq  40143a <explode_bomb>  // 不相等则爆炸
  4010cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  4010d0:	eb 07                	jmp    4010d9 <phase_5+0x77>

  //将eax寄存器的值设为0，跳转到40108b
  4010d2:	b8 00 00 00 00       	mov    $0x0,%eax
  4010d7:	eb b2                	jmp    40108b <phase_5+0x29>

  4010d9:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  4010de:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  4010e5:	00 00 
  4010e7:	74 05                	je     4010ee <phase_5+0x8c>
  4010e9:	e8 42 fa ff ff       	callq  400b30 <__stack_chk_fail@plt>
  4010ee:	48 83 c4 20          	add    $0x20,%rsp
  4010f2:	5b                   	pop    %rbx
  4010f3:	c3                   	retq   

  0x4024b0中的内容通过x/s命令可以得到： 0x4024b0 <array.3449>:	"maduiersnfotvbylSo you think you can stop the bomb with ctrl-c, do you?"
  是一个字符串数组
  0x40245e中的内容通过x/s命令可以得到： 0x40245e:	"flyers"
  得到是flyers字符串
  通过代码过程的分析，题目意思为我们需要输入长度为6的字符串，字符串中每一个字符的ASCII码取后4位后对应0x4024b0的下标，而这样选出来的字符串需要和flyers相等，即
  索引分别是：9 15 14 5 6 7，即我们输入的字符的后面的4位对应的ASCII码需要对应的是0x09，0x0f, 0x0e, 0x05, 0x06, 0x07
  查得表格如下：
  后四位对应的值               字符
  0x09                      ')'、‘9’、‘I’、‘Y’、‘i’、‘y’
  0x0f                      ‘/’、‘？’、‘O’、‘_’、‘o’
  0x0e                      ‘.’、‘>’、‘N’、‘^’、n‘、‘~’
  0x05                      '%'、‘5’、‘E’、‘U’、‘e’、‘u‘
  0x06                      ‘&’、‘6’、‘F’、‘V’、‘f’、‘v’
  0x07                      ‘''、‘7’、‘G’、‘W’、‘g’、‘w’
  上面这些任意组合成一个长度为6的字符串即可。

×××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××

phase_6

00000000004010f4 <phase_6>:
  4010f4:	41 56                	push   %r14
  4010f6:	41 55                	push   %r13
  4010f8:	41 54                	push   %r12
  4010fa:	55                   	push   %rbp
  4010fb:	53                   	push   %rbx
  4010fc:	48 83 ec 50          	sub    $0x50,%rsp  
  401100:	49 89 e5             	mov    %rsp,%r13
  401103:	48 89 e6             	mov    %rsp,%rsi // 开辟空间，寄存器入栈
  401106:	e8 51 03 00 00       	callq  40145c <read_six_numbers>  // 调用读取6个数字函数（表明输入的是6个数字）
                                                                          // 函数两个参数：一个输入字符串（在rdi寄存器中），第二个是一个6元素int类型的数组的首地址（用rsi传递）
                                                                          // 内部定义了int a[6]，首地址就是当前栈顶（rsp）
  40110b:	49 89 e6             	mov    %rsp,%r14                  // 寄存器指向栈顶，数组a的首地址
  40110e:	41 bc 00 00 00 00    	mov    $0x0,%r12d                 // r12d寄存器内容置为0




  401114:	4c 89 ed             	mov    %r13,%rbp           // 之前mov %rsp,%r13即为r13寄存器指向栈顶，此条即是把r13寄存器内容给rbp寄存器（即指向的内容相同）

  401117:	41 8b 45 00          	mov    0x0(%r13),%eax     // 取出r13寄存器指向的内容（数组a中的元素），把值给eax寄存器
  40111b:	83 e8 01             	sub    $0x1,%eax
  40111e:	83 f8 05             	cmp    $0x5,%eax           // 减1后与5进行比较（其实就是与6进行比较）
  401121:	76 05                	jbe    401128 <phase_6+0x34> // 小于等于5则跳转到401128
  401123:	e8 12 03 00 00       	callq  40143a <explode_bomb>  //否则爆炸 
                                                                      // 这5行说明数组中的元素值不能大于6，必须小于等于6，但是为正数，即0到6之间

  401128:	41 83 c4 01          	add    $0x1,%r12d            //r12d的值加1
  40112c:	41 83 fc 06          	cmp    $0x6,%r12d            // 比较与6的大小
  401130:	74 21                	je     401153 <phase_6+0x5f> //等于6跳转401153
  401132:	44 89 e3             	mov    %r12d,%ebx             //不等于6则将r12d中值给ebx
  401135:	48 63 c3             	movslq %ebx,%rax              //将ebx内容给rax
  401138:	8b 04 84             	mov    (%rsp,%rax,4),%eax     //从栈顶开始数到第rax的数组值给eax（rsp+4×rax）
  40113b:	39 45 00             	cmp    %eax,0x0(%rbp)         //将eax中值与rbp指向的内容（栈顶数组元素)比较
  40113e:	75 05                	jne    401145 <phase_6+0x51>  // 不相等则跳转401145
  401140:	e8 f5 02 00 00       	callq  40143a <explode_bomb>  //相等则爆炸
                                                                      
  401145:	83 c3 01             	add    $0x1,%ebx              //ebx中内容加1（ebx是r12d的值）
  401148:	83 fb 05             	cmp    $0x5,%ebx              // 与5相比较
  40114b:	7e e8                	jle    401135 <phase_6+0x41>  // 小于等于5则跳转到401135
  40114d:	49 83 c5 04          	add    $0x4,%r13              // r13寄存器指向下一个数组元素（地址加4）
  401151:	eb c1                	jmp    401114 <phase_6+0x20>  // 跳转到401114
                                                                      // 从401114到401151这中间的循环过程是遍历数组多遍，判断每一个元素之后的值都与自身不相等，结合之前的分析，我们得出数组中的6个
                                                                         元素都不能大于6，并且每个元素都不相同





  401153:	48 8d 74 24 18       	lea    0x18(%rsp),%rsi      // 将rsp+0x18处地址（数组中的a[6]）给rsi
  401158:	4c 89 f0             	mov    %r14,%rax            // rax指向栈顶（最初的r14指向栈顶）
  40115b:	b9 07 00 00 00       	mov    $0x7,%ecx            // 将7存入ecx寄存器中
  401160:	89 ca                	mov    %ecx,%edx 
             // ecx中的值给edx（edx也等于7）
  401162:	2b 10                	sub    (%rax),%edx          // 取出rax指向的内容（数组中的元素），用7减之后再存入edx中
  401164:	89 10                	mov    %edx,(%rax)          // 7减过之后的值存入原来的数组（两句合起来就是数组中每一个元素都被7减）
  401166:	48 83 c0 04          	add    $0x4,%rax            // 指向下一个数组元素
  40116a:	48 39 f0             	cmp    %rsi,%rax            // rax与rsi相比较（是否到达最后一个数组元素）
  40116d:	75 f1                	jne    401160 <phase_6+0x6c>  // 不相等则跳转到401160
                                                                      // 这段代码循环意思主要就是将数组中的6个元素都用7去减，得到的结果再存入数组（同样的顺序）




  
  40116f:	be 00 00 00 00       	mov    $0x0,%esi               // esi值置为0   
  401174:	eb 21                	jmp    401197 <phase_6+0xa3>   // 跳转到401197

  401176:	48 8b 52 08          	mov    0x8(%rdx),%rdx          // rdx地址加8
  40117a:	83 c0 01             	add    $0x1,%eax               // eax值加1
  40117d:	39 c8                	cmp    %ecx,%eax               //比较ecx和eax
  40117f:	75 f5                	jne    401176 <phase_6+0x82>    // 不相等则跳转401176
  401181:	eb 05                	jmp    401188 <phase_6+0x94>    //相等跳转401188

  401183:	ba d0 32 60 00       	mov    $0x6032d0,%edx            // 将地址0x6032d0存入edx寄存器
  401188:	48 89 54 74 20       	mov    %rdx,0x20(%rsp,%rsi,2)    // 将rdx内容存入（rsp+0x20基址加上rsi*2）中
  40118d:	48 83 c6 04          	add    $0x4,%rsi                 // rsi加4
  401191:	48 83 fe 18          	cmp    $0x18,%rsi                // rsi值与0x18相比较
  401195:	74 14                	je     4011ab <phase_6+0xb7>     //相等则跳转到4011ab

  401197:	8b 0c 34             	mov    (%rsp,%rsi,1),%ecx     // 将rsp+rsi×1地址指向的内容给ecx寄存器（rsi为0时是栈顶地址，即数组首元素地址）
  40119a:	83 f9 01             	cmp    $0x1,%ecx              // 比较ecx和1
  40119d:	7e e4                	jle    401183 <phase_6+0x8f>  // ecx小于等于1时跳转到401183

  40119f:	b8 01 00 00 00       	mov    $0x1,%eax              // 否则eax置为1
  4011a4:	ba d0 32 60 00       	mov    $0x6032d0,%edx         // 将地址0x6032d0存入edx寄存器
  4011a9:	eb cb                	jmp    401176 <phase_6+0x82>  //跳转到401176
                                                                      //
                                                                      // 此段中第一：rsp+0x20基址，并且rsi×2，每次rsi加4，即每次地址加8
                                                                      // 第二是地址0x6032d0中的内容是什么？
                                                                      //(gdb) x/12xg 0x6032d0
                                                                        0x6032d0 <node1>:	0x000000010000014c	0x00000000006032e0
                                                                        0x6032e0 <node2>:	0x00000002000000a8	0x00000000006032f0
                                                                        0x6032f0 <node3>:	0x000000030000039c	0x0000000000603300
                                                                        0x603300 <node4>:	0x00000004000002b3	0x0000000000603310
                                                                        0x603310 <node5>:	0x00000005000001dd	0x0000000000603320
                                                                        0x603320 <node6>:	0x00000006000001bb	0x0000000000000000
                                                                     // 我们可以看出地址0x6032d0存的是一个链表，链表有6个结点，结点的首地址为0x6032d0
                                                                     // 链表结点的结构可以看成：
                                                                     //struct node{
                                                                        int id;
                                                                        int value;
                                                                        struct node *next;
                                                                     };
                                                                     // 所以在40119d时，判断数组元素小于等于1后跳转到401183，此时a[%rsi]等于1，结点nodes[%rsi]指向node1，
                                                                     // 然后根据401176到401181，可以得知a[%rsi]为多少，就指向相应的node。
                                                                     // rsp+0x20寻址时步长为8是因为64位系统中指针是占8字节，int占4字节。
                                                                     // 所以这段代码含义是在rsp+0x20基址处存了一个struct node *nodes[6]的数组，我们根据原本int a[6]里面数组对应
                                                                        的值使该结点数组中的结点内容等同于0x6032d0处的链表的结点。如果a[%esi]的值小于等于1则nodes[%esi]直接指向node1。
                                                                        否则指向对应的nodeX，其中X的值与a[%esi]的值相等。（nodes[%esi]里存的是对应node的地址，所以是8个字节）



  4011ab:	48 8b 5c 24 20       	mov    0x20(%rsp),%rbx     // rbx是rsp+0x20处存的值
  4011b0:	48 8d 44 24 28       	lea    0x28(%rsp),%rax     // rax是rsp+0x28（一个地址）
  4011b5:	48 8d 74 24 50       	lea    0x50(%rsp),%rsi     // rsi是rsp+0x50（一个地址）
  4011ba:	48 89 d9             	mov    %rbx,%rcx           //将rbx中内容给rcx
  4011bd:	48 8b 10             	mov    (%rax),%rdx         // 将rax中存的地址指向的值给rdx
  4011c0:	48 89 51 08          	mov    %rdx,0x8(%rcx)      //将rdx中的内容给 rcx中内容加8得到的地址指向的位置
  4011c4:	48 83 c0 08          	add    $0x8,%rax           // rax加8，调到下一个链表数组元素
  4011c8:	48 39 f0             	cmp    %rsi,%rax           //比较是否到数组末
  4011cb:	74 05                	je     4011d2 <phase_6+0xde>   //相等则跳转
  4011cd:	48 89 d1             	mov    %rdx,%rcx             //否则rdx内容给rcx
  4011d0:	eb eb                	jmp    4011bd <phase_6+0xc9>  //返回执行
  4011d2:	48 c7 42 08 00 00 00 	movq   $0x0,0x8(%rdx)         // 最后执行完将最后一个结点的next指针指向空
                                                                  // rsi被赋成rsp+0x50，不难看出这标记着链表数组结尾
                                                                     rbx从rsp+0x20开始，rax从rsp+0x28开始，rcx从rsp+0x20开始
                                                                     每次循环都将rdx赋成rax所指向的值，然后将rcx+8所指的地址存成rdx，然后rax加8，直到rax等于rsi退出
                                                                     这个循环的作用很简单，在4011c0处可以看出，这个循环让新排好的node序列中每个node的指针域指向新链表中的下一个node（因为我们可能打乱了原先链表的顺序，需要重连）
  4011d9:	00 
  4011da:	bd 05 00 00 00       	mov    $0x5,%ebp           // ebp置为5
  4011df:	48 8b 43 08          	mov    0x8(%rbx),%rax       // 将rbx中内容加8得到的地址指向的内容给rax
  4011e3:	8b 00                	mov    (%rax),%eax          // 将rax自身中的内容给eax（即链表结点的value值）
  4011e5:	39 03                	cmp    %eax,(%rbx)          //比较后一个结点的value值和前一个结点的value值
  4011e7:	7d 05                	jge    4011ee <phase_6+0xfa>   // 前一个结点大则跳转到4011ee
  4011e9:	e8 4c 02 00 00       	callq  40143a <explode_bomb>  // 否则爆炸
  4011ee:	48 8b 5b 08          	mov    0x8(%rbx),%rbx
  4011f2:	83 ed 01             	sub    $0x1,%ebp            // 计数器减1
  4011f5:	75 e8                	jne    4011df <phase_6+0xeb>
                                                                  // 最后一段代码一开始将rdx+8的地方存上0，这也是在完成上个循环的工作：最后一个节点的指针域为NULL
                                                                     4011da将ebp赋成5，然后循环开始：
                                                                     rax赋成rbx+8所指的值，也就是下一个节点的地址（rbx在上一个循环中等于rsp+32，第一个节点的地址）
                                                                     然后rax等于其自身所指的值，也就是节点所存整型数的数值
                                                                     比较rbx的节点整型值和rax，在4011e7可以看出，前一个节点的整型数值必须更大，否则触雷
                                                                     然后rbx加上12变成下一个节点的地址，ebp减去1，回到循环开头
                                                                     这个循环告诉我们，新的链表中每个节点的值都要大于下一个的。
                                                                     回到0x6032d0开始的那一片链表，比较一下那些数的大小不难发现满足条件的重排链表是: node3 node4 node5 node6 node1 node2
                                                                     考虑到num变成了7-num，我们一开始的输入就应该是：4 3 2 1 6 5

  4011f7:	48 83 c4 50          	add    $0x50,%rsp
  4011fb:	5b                   	pop    %rbx
  4011fc:	5d                   	pop    %rbp
  4011fd:	41 5c                	pop    %r12
  4011ff:	41 5d                	pop    %r13
  401201:	41 5e                	pop    %r14
  401203:	c3                   	retq   

  故最终输入的为4 3 2 1 6 5

